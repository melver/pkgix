#!/usr/bin/env bash

#
# pkgix: Prefix environment and simple package management tool.
#
# Copyright (C) 2012, Marco Elver <me AT marcoelver.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

set -o errtrace
set -o errexit
set -o nounset

#============================================================================
# Constants
#
PROG_VERSION="0.3.0"
PROGNAME="pkgix"
DB_PREFIX="var/lib/${PROGNAME}/local"
LOG_FILE="var/log/${PROGNAME}.log"
LOCK_FILE="var/lock/${PROGNAME}.lock"
URL_SEP=";"
METAPKG_DUMMY="_dummy"
readonly PROG_VERSION PROGNAME DB_PREFIX LOG_FILE URL_SEP METAPKG_DUMMY

#============================================================================
# Exit codes
#
EXIT_OK=0
EXIT_ERR=1
EXIT_INVALID_OPTION=2
EXIT_USER_ABORT=3
readonly EXIT_OK EXIT_ERR EXIT_INVALID_OPTION EXIT_USER_ABORT

#============================================================================
# Function return codes
#
RET_OK=0
RET_ERR=1
RET_INVALID_OPTION=2
RET_USER_ABORT=3
readonly RET_OK RET_ERR RET_INVALID_OPTION RET_USER_ABORT

#============================================================================
# Configurable variables, settable via environment
#
: ${PKGIX_REPO_URLS:="${HOME}/${PROGNAME}-repo/pkgs"}
: ${PKGIX_SHELL:="$SHELL"}
: ${PKGIX_FETCH:="wget -O %s"}
: ${PKGIX_COLOR:=1}

# PKGIX_ROOT: If set, PKGIX_ROOT is being used as the default root
#	(no need to specify for each command).
#
# PKGIX_BUILD_DIR: If set, uses ${PKGIX_BUILD_DIR}/{pkgix-build,pkgix-install}
#	to build packages in, instead of default <prefix-root>/{.pkgix-build,.pkgix-install}.

# Setup gettext ($"...")
# Need to set TEXTDOMAIN first, then TEXTDOMAINDIR -- see BASH 4.2 source
TEXTDOMAIN="$PROGNAME"
TEXTDOMAINDIR="$(cd "${0%/*}"/.. && pwd)/share/locale"

#============================================================================
# Color config
#
# Check if color is enabled and we have stderr/in on terminal
if [[ "$PKGIX_COLOR" != "0" && -t 2 && -t 1 ]]; then
	# Check if we have tput
	if type -p tput > /dev/null; then
		Crst="$(tput sgr0)"
		Cred="$(tput setaf 1)"
		Cgrn="$(tput setaf 2)"
		Cylw="$(tput setaf 3)"
		Cblu="$(tput setaf 4)"
		Cpur="$(tput setaf 5)"
		Ccyn="$(tput setaf 6)"
		_tput_bold="$(tput bold)"
		CredB="${_tput_bold}${Cred}"
		CgrnB="${_tput_bold}${Cgrn}"
		CylwB="${_tput_bold}${Cylw}"
		CbluB="${_tput_bold}${Cblu}"
		CpurB="${_tput_bold}${Cpur}"
		CcynB="${_tput_bold}${Ccyn}"
		unset _tput_bold
	else
		# Fallback
		Crst='\e[0m'
		Cred='\e[0;31m'
		Cgrn='\e[0;32m'
		Cylw='\e[0;33m'
		Cblu='\e[0;34m'
		Cpur='\e[0;35m'
		Ccyn='\e[0;36m'
		CredB='\e[1;31m'
		CgrnB='\e[1;32m'
		CylwB='\e[1;33m'
		CbluB='\e[1;34m'
		CpurB='\e[1;35m'
		CcynB='\e[1;36m'
	fi
else
	Crst=
	Cred=
	Cgrn=
	Cylw=
	Cblu=
	Cpur=
	Ccyn=
	CredB=
	CgrnB=
	CylwB=
	CbluB=
	CpurB=
	CcynB=
fi

#============================================================================
# log_printf pkgix_root args...
#
log_printf() { #{{{
	local log_file="${1}/${LOG_FILE}"
	shift
	[[ ! -d "${log_file%/*}" ]] && mkdir -p "${log_file%/*}" || :
	printf "[$(date)] ""$@" >> "$log_file"
} #}}}

#============================================================================
# printf wrappers
#
msg_printf() { #{{{
	printf "${Cpur}[${PROGNAME}]${Crst} ""$@" 1>&2
} #}}}

verbose_printf() { #{{{
	(( arg_verbose )) && msg_printf "$@" || :
} #}}}

error_printf() { #{{{
	msg_printf "${Cred}"$"ERROR:""${Crst} ""$@"
} #}}}

warning_printf() { #{{{
	msg_printf "${Cylw}"$"WARNING:""${Crst} ""$@"
} #}}}

#============================================================================
# Sanitize environment variables (need *_printf)
#
if [[ -n "${PKGIX_BUILD_DIR:-}" ]]; then
	if [[ ! -d "$PKGIX_BUILD_DIR" ]]; then
		error_printf $"PKGIX_BUILD_DIR='%s' is not a valid directory!\n" "$PKGIX_BUILD_DIR"
		exit $EXIT_ERR
	fi

	PKGIX_BUILD_DIR="$(cd "$PKGIX_BUILD_DIR" && pwd)"
fi

#============================================================================
# in_list needle hay...
#
in_list() { #{{{
	local needle="$1"
	shift

	local elem
	for elem in "$@"; do
		[[ "$elem" == "$needle" ]] && return $RET_OK || :
	done

	return $RET_ERR
} #}}}

#============================================================================
# OS dependent functions
# Also set ostype and architecture (aliases to OS and arch name)
#
case "$OSTYPE" in #{{{
	*freebsd*|*FreeBSD*)
		ostype="freebsd"
		architecture="$(uname -m)"

		sha256checksum() {
			sha256 "$@"
		}

		find_printbase() {
			find "$@" | sed "s:^$1::" 
		}
		;;
	*|*linux*)
		ostype="$OSTYPE"
		architecture="$(uname -m)"

		sha256checksum() {
			sha256sum "$@"
		}

		find_printbase() {
			find "$@" -printf "%P\n"
		}
		;;
esac #}}}

#============================================================================
# lock_root pkgix_root
# Checks for existing lock, creates a lock file in pkgix_root if not locked.
#
# Should not call from subshells!
#
lock_root() { #{{{
	local pkgix_root="$(cd "$1" && pwd)"
	local lock_file="${pkgix_root}/${LOCK_FILE}"
	if [[ -f "$lock_file" ]]; then
		error_printf $"%s exists!\n" "$lock_file"
		return $RET_ERR
	fi

	[[ ! -d "${lock_file%/*}" ]] && mkdir -p "${lock_file%/*}" || :
	: > "$lock_file"
	trap "unlock_root '${pkgix_root}'" EXIT
	return $RET_OK
} #}}}

#============================================================================
# unlock_root pkgix_root
#
unlock_root() { #{{{
	local pkgix_root="$(cd "$1" && pwd)"
	local lock_file="${pkgix_root}/${LOCK_FILE}"
	rm "$lock_file"
	trap - EXIT
} #}}}

#============================================================================
# extract_archive path_to_archive
#
extract_archive() { #{{{
	local archive_name="${1:-}"

	if [[ -f "$archive_name" ]] ; then
		msg_printf $"Extracting '%s'...\n" "$archive_name"

		case "$archive_name" in
			*.tar.bz2)  tar xjf "$archive_name"   ;;
			*.tar.gz)   tar xzf "$archive_name"   ;;
			*.tar.lzma) tar --lzma -xf "$archive_name" ;;
			*.tar.xz)   tar xJf "$archive_name"   ;;
			*.tar)      tar xf "$archive_name"    ;;
			*.tbz2)     tar xjf "$archive_name"   ;;
			*.tgz)      tar xzf "$archive_name"   ;;
			*.txz)      tar xJf "$archive_name"   ;;
			*.bz2)      bunzip2 "$archive_name"    ;;
			*.rar)      unrar x "$archive_name"    ;;
			*.gz)       gunzip "$archive_name"     ;;
			*.zip)      unzip "$archive_name"      ;;
			*.Z)        uncompress "$archive_name" ;;
			*.7z)       7z x "$archive_name"       ;;
			*)          error_printf $"'%s' cannot be extracted (unknown format)!\n" "$archive_name" ; exit $EXIT_ERR ;;
		esac
	else
		error_printf $"'%s' is not a valid file !\n" "$archive_name"
		exit $EXIT_ERR
	fi
} #}}}

#============================================================================
# fetch url checksum_sha256 [file_name]
# Function for use in package description files.
#
fetch() { #{{{
	local url="${1:-}"
	local checksum_sha256="${2:-}"
	local file_name="${3:-${url##*/}}"

	if [[ -z "$url" ]]; then
		error_printf $"Invalid URL\n"
		exit $EXIT_ERR
	fi

	if [[ ! -f "$file_name" ]]; then
		if [[ "$url" =~ ^/ ]]; then
			# Is a local path, just copy
			msg_printf $"Copying '%s'...\n" "$url"
			if ! cp "$url" "$file_name" &> /dev/null; then
				error_printf $"Copying '%s' failed!\n" "$url"
				exit $EXIT_ERR
			fi
		else
			local fetch_cmd
			printf -v fetch_cmd "$PKGIX_FETCH" "$file_name"
			msg_printf $"Fetching '%s'...\n" "$url"
			if ! $fetch_cmd "$url"; then
				error_printf $"Fetching '%s' failed!\n" "$url"
				exit $EXIT_ERR
			fi
		fi
	fi

	local file_checksum_sha256
	file_checksum_sha256=($(sha256checksum "$file_name"))
	file_checksum_sha256="${file_checksum_sha256[0]}"

	if [[ -n "$checksum_sha256" ]]; then
		if (( ! arg_ignore_checksums )); then
			if [[ "$file_checksum_sha256" != "$checksum_sha256" ]]; then
				error_printf $"Checksum of '%s' (%s)\n    does not match (%s)!\n" "$file_name" "$file_checksum_sha256" "$checksum_sha256"
				exit $EXIT_ERR
			else
				msg_printf $"Valid checksum: %s\n" "$file_name"
			fi
		else
			warning_printf $"Ignoring checksum for '%s'...\n" "$file_name"
		fi
	else
		if (( ! arg_ignore_checksums )); then
			error_printf $"No checksum for '%s' (%s)!\n" "$file_name" "$file_checksum_sha256"
			exit $EXIT_ERR
		else
			warning_printf $"No checksum for '%s' (%s)!\n" "$file_name" "$file_checksum_sha256"
		fi
	fi
} #}}}

#============================================================================
# fetch_extract url checksum [archive_name]
# Function for use in package description files.
#
fetch_extract() { #{{{
	local url="${1:-}"
	local checksum_sha256="${2:-}"
	local archive_name="${3:-${url##*/}}"

	fetch "$url" "$checksum_sha256" "$archive_name"
	extract_archive "$archive_name"
} #}}}

#============================================================================
# remove_empty_dirs path [depth]
# Remove empty directories in path.
#
remove_empty_dirs() { #{{{
	local path="$1"
	local depth="${2:-}"
	local find_args
	[[ -z "$depth" ]] && find_args=() || find_args=("-maxdepth" "$depth")

	find "$path" "${find_args[@]:+${find_args[@]}}" -type d -empty -delete
} #}}}

#============================================================================
# prompt_continue
# Prompt user for "Continue ? [Y/n]"
# Return code will be RET_OK for y and RET_ERR for n.
#
prompt_continue() { #{{{
	(( arg_noconfirm )) && return $RET_OK

	local answer

	printf "${CbluB}"$"Continue ?"" [Y/n] ${Crst}"
	read answer

	if [[ ! "$answer" =~ ^[yY]|^$ ]]; then
		verbose_printf $"User aborted.\n"
		return $RET_ERR
	fi

	return $RET_OK
} #}}}

#============================================================================
# export_env pkgix_root
#
export_env() { #{{{
	[[ ! -d "${1:-}" ]] && return $RET_ERR
	local pkgix_root="$(cd "$1" && pwd)"

	if [[ -z "${PKGIX_ROOT:-}" ]]; then
		# Export so calls to pkgix don't need the root; appending, so that 
		# installing takes the first root.
		export PKGIX_ROOT="$pkgix_root"
	else
		# Check if this has already been exported
		# Also check CPATH, as I don't expect a user to set it for a pkgix root.
		[[ "$PKGIX_ROOT" =~ ^(.*:)?${pkgix_root}(:.*)?$ &&
			"$CPATH" =~ ^(.*:)?${pkgix_root}/include(:.*)?$ ]] && return $RET_OK

		export PKGIX_ROOT="$PKGIX_ROOT:${pkgix_root}"
	fi

	verbose_printf $"Exporting environment: %s\n" "$pkgix_root"

	# Prepending to PATH
	export PATH="${pkgix_root}/bin:${PATH:-}"
	export PATH="${pkgix_root}/sbin:${PATH:-}"

	local library_path="${pkgix_root}/lib"

	# Don't necessarily want lib64/lib32 on the path, especially if the setup is pure,
	# therefore check and only add them if they exist.
	local libdir
	for libdir in lib64 lib32; do
		if [[ -d "${pkgix_root}/${libdir}" ]]; then
			library_path+=":${pkgix_root}/${libdir}"
		fi
	done

	# LD_LIBRARY_PATH is harmful, as it makes programs from the system use
	# the libraries found in $pkgix_root/lib, which is certainly not
	# considered stable.
	# For more info: http://xahlee.info/UnixResource_dir/_/ldpath.html

	# Instead, make programs include the correct search path when they are
	# compiled (--rpath).
	if [[ -z "${LD_RUN_PATH:-}" ]]; then
		export LD_RUN_PATH="${library_path}"
	else
		export LD_RUN_PATH="${library_path}:$LD_RUN_PATH"
	fi

	# And make the linker look in the right paths (-L)
	if [[ -z "${LIBRARY_PATH:-}" ]]; then
		export LIBRARY_PATH="${library_path}"
	else
		export LIBRARY_PATH="${library_path}:$LIBRARY_PATH"
	fi

	if [[ -z "${PKG_CONFIG_PATH:-}" ]]; then
		export PKG_CONFIG_PATH="${pkgix_root}/lib/pkgconfig"
	else
		export PKG_CONFIG_PATH="${pkgix_root}/lib/pkgconfig:$PKG_CONFIG_PATH"
	fi

	# C/C++ preprocessor search paths (-I)
	if [[ -z "${CPATH:-}" ]]; then
		export CPATH="${pkgix_root}/include"
	else
		export CPATH="${pkgix_root}/include:$CPATH"
	fi

	return $RET_OK
} #}}}

#============================================================================
# cmd_showenv pkgix_root...
#
cmd_showenv() { #{{{
	local pkgix_root
	for pkgix_root in "$@"; do
		export_env "$pkgix_root" || :
	done

	# See export_env for why we are not exporting LD_LIBRARY_PATH

	case "$PKGIX_SHELL" in
		*csh)
			[[ -n "${PKGIX_ROOT:-}" ]] && echo "setenv PKGIX_ROOT \"$PKGIX_ROOT\"" || :
			[[ -n "${PATH:-}" ]] && echo "setenv PATH \"$PATH\"" || :
			[[ -n "${LD_RUN_PATH:-}" ]] && echo "setenv LD_RUN_PATH \"$LD_RUN_PATH\"" || :
			[[ -n "${LIBRARY_PATH:-}" ]] && echo "setenv LIBRARY_PATH \"$LIBRARY_PATH\"" || :
			[[ -n "${PKG_CONFIG_PATH:-}" ]] && echo "setenv PKG_CONFIG_PATH \"$PKG_CONFIG_PATH\"" || :
			[[ -n "${CPATH:-}" ]] && echo "setenv CPATH \"$CPATH\"" || :
			;;
		*)
			# Assume sh compatible shell (bash, zsh, ..)
			[[ -n "${PKGIX_ROOT:-}" ]] && echo "export PKGIX_ROOT=\"$PKGIX_ROOT\"" || :
			[[ -n "${PATH:-}" ]] && echo "export PATH=\"$PATH\"" || :
			[[ -n "${LD_RUN_PATH:-}" ]] && echo "export LD_RUN_PATH=\"$LD_RUN_PATH\"" || :
			[[ -n "${LIBRARY_PATH:-}" ]] && echo "export LIBRARY_PATH=\"$LIBRARY_PATH\"" || :
			[[ -n "${PKG_CONFIG_PATH:-}" ]] && echo "export PKG_CONFIG_PATH=\"$PKG_CONFIG_PATH\"" || :
			[[ -n "${CPATH:-}" ]] && echo "export CPATH=\"$CPATH\"" || :
			;;
	esac
} #}}}

#============================================================================
# is_pkg_pointer pkg_file
#
is_pkg_pointer() { #{{{
	[[ "$(wc -l < "$1")" =~ ^[^0-9]*[01][^0-9]*$ ]]
} #}}}

#============================================================================
# source_pkg_file pkg_file
#
source_pkg_file() { #{{{
	local pkg_name="$1"
	local pkg_file="$2"

	if is_pkg_pointer "$pkg_file"; then
		local resolved_pkg_name="$(<$pkg_file)"

		if [[ -z "${resolved_pkg_name:-}" ]]; then
			error_printf $"Empty package description file!\n"
			return $RET_ERR
		fi

		verbose_printf $"Pointer: %s -> %s\n" "$pkg_name" "$resolved_pkg_name"
		source_pkg "$resolved_pkg_name"
	else
		source "$pkg_file"
	fi
} #}}}

#============================================================================
# source_pkg pkg_name
#
source_pkg() { #{{{
	local pkg_name="$1"
	local pkg_file
	local o_IFS="$IFS" ; IFS="$URL_SEP"

	# Don't set repo_url as local here, as it can then be used in the package
	# description files to get information about its source repository, and 
	# e.g., download extra files such as patches from the repo.
	for repo_url in $PKGIX_REPO_URLS; do
		pkg_file="${repo_url}/$pkg_name"

		case "$pkg_file" in
			http://*|https://*|ftp://*)
				local tmpfile="$(mktemp)"

				verbose_printf $"Trying: %s\n" "$pkg_file"
				if wget -q -O "$tmpfile" "$pkg_file"; then
					verbose_printf $"Source:"" ${Cgrn}%s${Crst}\n" "$pkg_file"
					source_pkg_file "$pkg_name" "$tmpfile"
					rm "$tmpfile"
					break
				fi
				rm "$tmpfile"
				;;
			*)
				verbose_printf $"Trying: %s\n" "$pkg_file"
				if [[ -f "$pkg_file" ]]; then
					verbose_printf $"Source:"" ${Cgrn}%s${Crst}\n" "$pkg_file"
					source_pkg_file "$pkg_name" "$pkg_file"
					break
				fi
				;;
		esac
	done

	IFS="$o_IFS"

	[[ -n "${version:-}" || "${metapkg:-}" == "$METAPKG_DUMMY" ]]
} #}}}

#============================================================================
# sourced_pkg_call funcname [pkgix_root [install_dir]]
# Wrap sourced function call execution.
#
# Disable 'nounset' for calling sourced functions, as the complexity of package
# description files should be small enough to trade some code safety for
# convenience. Enable inside the functions if neccessary.
#
# Makes the following extra variables available to package description file:
#     prefix=pkgix_root
#     destdir=install_dir
#
# Otherwise potentially useful variables which are available from parent scope:
#     old_version - if package is being upgraded (see root_upgrade)
#     repo_url - the URL where the package description file is located
#
# Due to the way BASH behaves, propagating even local variables from a parent
# function to its children, ALL variables from parents will be available.
# However, as the function to be called is executed in a subshell, none of
# these variables can be affected after completion of sourced_pkg_call.
#
sourced_pkg_call() { #{{{
	local funcname=$1

	if ! type -p $funcname > /dev/null; then
		error_printf $"Package file does not provide function: %s\n" "$funcname"
		exit $EXIT_ERR
	fi

	(
		# Optional Arguments, passed as globals
		if [[ -n "${2:-}" ]]; then
			prefix="$2"
			[[ -n "${3:-}" ]] && destdir="$3"
		fi

		(( ! arg_debug )) && set +o nounset || :
		$funcname
	)
} #}}}

#============================================================================
# unset_sourced_pkg
# unsets all fields that could be set by a package file
#
unset_sourced_pkg() { #{{{
	unset metapkg
	unset satisfied
	unset version
	unset license
	unset website
	unset description
	unset depends
	unset iscompat
	unset isinstalled
	unset build
	unset installenv
	unset postinstall
	unset forceinstall
	unset backup
} #}}}

#============================================================================
# pkg_isinstalled_db pkgix_root pkg_name
#
pkg_isinstalled_db() { #{{{
	local pkgix_root="$1"
	local pkg_name="$2"
	local db_prefix="${pkgix_root}/${DB_PREFIX}/${pkg_name}"

	[[ -f "${db_prefix}/version" && -f "${db_prefix}/files" ]]
} #}}}

#============================================================================
# set_db_vars pkgix_root pkg_name
#
set_db_vars() { #{{{
	local pkgix_root="$1"
	local pkg_name="$2"
	db_prefix="${pkgix_root}/${DB_PREFIX}/${pkg_name}"
	db_files_file="${db_prefix}/files"
	db_backup_file="${db_prefix}/files.backup"
	db_version_file="${db_prefix}/version"
	db_info_file="${db_prefix}/info"
} #}}}

#============================================================================
# unset_db_vars
#
unset_db_vars() { #{{{
	unset db_prefix
	unset db_files_file
	unset db_backup_file
	unset db_version_file
	unset db_info_file
} #}}}

#============================================================================
# pkg_install_db pkgix_root pkg_name
#
pkg_install_db() { #{{{
	local pkgix_root="$1"
	local pkg_name="$2"
	local staging_files_file="$3"
	local pkgnew_files_file="$4"
	local staging_backup_file="$5"

	set_db_vars "$pkgix_root" "$pkg_name"

	# Create installed database folders
	mkdir -p "${db_prefix}"

	# Use previously created list of files and pkgnew files
	cat "$staging_files_file" "$pkgnew_files_file" > "$db_files_file"
	rm "$staging_files_file" "$pkgnew_files_file"

	# Use previously created list of backup files
	mv "$staging_backup_file" "$db_backup_file"

	echo "${version:-}" > "$db_version_file"
	[[ -z "${version:-}" ]] && warning_printf $"Empty 'version' field in package description file of '%s'!\n" "$pkg_name"

	{
		echo "description=\"${description:-}\""
		echo "installdate=\"$(date)\""
		echo "website=\"${website:-}\""

		printf "license=("
		local license_elem
		for license_elem in "${license[@]:+${license[@]}}"; do
			printf " '%s'" "$license_elem"
		done
		printf " )\n"

		printf "depends=("
		local dep_name
		for dep_name in "${depends[@]:+${depends[@]}}"; do
			printf " '%s'" "$dep_name"
		done
		printf " )\n"
	} > "$db_info_file"

	[[ -z "${description:-}" ]] && warning_printf $"Empty 'description' field in package description file of '%s'!\n" "$pkg_name"
	[[ -z "${license[*]:+${license[*]}}" ]] && warning_printf $"Empty 'license' field in package description file of '%s'!\n" "$pkg_name"
	[[ -z "${website:-}" ]] && warning_printf $"Empty 'website' field in package description file of '%s'!\n" "$pkg_name"

	# The db file is important for upgrading packages in the order they were installed!
	# As the entries are not deleted upon removal, over time, a dependence ordering
	# is being built, so that if removed packages are reinstalled, upgrading still
	# works as before.
	local db_file="${pkgix_root}/${DB_PREFIX}.db"

	if [[ -f "$db_file" ]] && grep -q "^.|${pkg_name}$" "$db_file"; then
		sed -i "s:^.|${pkg_name}$:i|${pkg_name}:" "$db_file"
	else
		echo "i|$pkg_name" >> "$db_file"
	fi

	unset_db_vars
} #}}}

#============================================================================
# unset_db_info
#
unset_db_info() { #{{{
	unset description
	unset website
	unset license
	unset depends
	unset installdate
} #}}}

#============================================================================
# db_list_installed
#
db_list_installed() { #{{{
	local pkgix_root="$1"

	if [[ -f "${pkgix_root}/${DB_PREFIX}.db" ]]; then
		grep "^i|" "${pkgix_root}/${DB_PREFIX}.db" | sed 's:^i|::' |
		while read pkg_name; do
			if ! pkg_isinstalled_db "$pkgix_root" "$pkg_name"; then
				warning_printf $"Inconsistent database entry: %s\n" "$pkg_name"
				continue
			fi

			echo "$pkg_name"
		done
	fi
} #}}}

#============================================================================
# pkg_install pkgix_root pkg_name [reinstall]
#
pkg_install() { #{{{
	local pkgix_root="$1"
	local pkg_name="$2"
	local reinstall="${3:-0}"
	local is_reinstall=0

	if [[ ! -d "$pkgix_root" ]]; then
		error_printf $"'%s' is not a valid directory!\n" "$pkgix_root"
		exit $EXIT_ERR
	fi

	if pkg_isinstalled_db "$pkgix_root" "$pkg_name"; then
		if (( ! reinstall )); then
			msg_printf "${Cgrn}%s${Crst} "$"is available\n" "$pkg_name"
			return $RET_OK
		else
			is_reinstall=1
		fi
	fi

	msg_printf "${CcynB}=> %s${Crst}\n" "$pkg_name"

	(
		# Source package description file and try to traverse until a non-meta
		# package description is found.
		local next_pkg_name="$pkg_name" # preserve requested package name
		while :; do
			# Unset previous package variables, otherwise we might end in an
			# endless loop when resolving dependencies, metapkgs, or might even
			# keep unset variables/functions.
			unset_sourced_pkg

			if ! source_pkg "$next_pkg_name"; then
				error_printf $"Could not find valid package description file for '%s'!\n" "$next_pkg_name"
				exit $EXIT_ERR
			fi

			# Not a meta-package, continue normally
			[[ -z "${metapkg:-}" ]] && break

			# Is metapackage, check if satisfied
			if (( ! is_reinstall )) && sourced_pkg_call satisfied; then
				if (( ! arg_force )); then
					msg_printf $"Metapackage '%s' satisfied.\n" "$next_pkg_name"
					exit $EXIT_OK
				else
					warning_printf $"Forcing installation of metapackage '%s', despite satisfied...\n" "$next_pkg_name"
				fi
			fi

			# If this metapackage is only a dummy to check if a dependence is satisfied,
			# and the above 'satisfied' function failed, this is a dead end.
			if [[ "$metapkg" == "$METAPKG_DUMMY" ]]; then
				error_printf $"Metapackage '%s' could not be satisfied!\n" "$next_pkg_name"
				exit $EXIT_ERR
			fi

			# Not satisfied and not a dummy, resolve this by trying to install
			# the suggested package metapkg.
			msg_printf $"Metapackage: %s -> %s\n" "$next_pkg_name" "$metapkg"
			next_pkg_name="$metapkg"
		done

		if (( ! is_reinstall )) && sourced_pkg_call isinstalled; then
			if (( ! arg_force )); then
				msg_printf $"'%s' already available outside of '%s', skipping...\n" "$pkg_name" "$pkgix_root"
				exit $EXIT_OK
			else
				msg_printf $"Forcing installation of '%s', despite already available outside of '%s'...\n" "$pkg_name" "$pkgix_root"
			fi
		fi

		if ! sourced_pkg_call iscompat; then
			if (( ! arg_force )); then
				error_printf $"'%s' is not compatible with your system!\n" "$pkg_name"
				exit $EXIT_ERR
			else
				warning_printf $"Trying installation of '%s', despite system incompatibility...\n" "$pkg_name"
			fi
		fi

		if (( ! arg_nodeps )); then
			msg_printf "${Cgrn}%s (%s)${Crst} "$"resolving dependencies...\n" "$pkg_name" "${version:-}"
			local dep_name
			for dep_name in "${depends[@]:+${depends[@]}}"; do
				pkg_install "$pkgix_root" "$dep_name"
			done
		else
			warning_printf $"Ignoring dependencies.\n"
		fi

		msg_printf "${Cgrn}%s (%s)${Crst} "$"building...\n" "$pkg_name" "${version:-}"

		local build_dir
		local install_dir
		if [[ -n "${PKGIX_BUILD_DIR:-}" ]]; then
			build_dir="${PKGIX_BUILD_DIR}/${PROGNAME}-build"
			install_dir="${PKGIX_BUILD_DIR}/${PROGNAME}-install"
		else
			build_dir="${pkgix_root}/.${PROGNAME}-build"
			install_dir="${pkgix_root}/.${PROGNAME}-install"
		fi

		mkdir -p "$build_dir"
		mkdir -p "$install_dir"

		pushd "$build_dir" &> /dev/null

		# Setup cleanup trap, as this is executed in subshell, it does not
		# affect the parent shell's trap which will be executed normally on exit.
		local trap_cmd="{ popd &> /dev/null; rm -rf \"$install_dir\";"
		(( ! arg_keep_build_dir )) && trap_cmd+=" rm -rf \"$build_dir\";"
		trap_cmd+=" }"

		trap "$trap_cmd" EXIT

		if ! sourced_pkg_call build "$pkgix_root" "$install_dir"; then
			error_printf $"Building '%s' failed! Aborting.\n" "$pkg_name"
			exit $EXIT_ERR
		fi

		msg_printf "${Cgrn}%s (%s)${Crst} "$"installing into staging area...\n" "$pkg_name" "${version:-}"

		if ! sourced_pkg_call installenv "$pkgix_root" "$install_dir"; then
			error_printf $"Installation of '%s' failed! Aborting.\n" "$pkg_name"
			exit $EXIT_ERR
		fi

		if (( is_reinstall )); then
			# Remove after build/installenv, so that if building/installing
			# a package depends on itself it is used rather than the system
			# version (e.g., gcc, make).  If the system version should be used
			# again: remove->install manually.
			pkg_remove "$pkgix_root" "$pkg_name"
		fi

		# Create the list of files to be installed
		local staging_files_file="${build_dir}/.staging.files"
		: > "$staging_files_file"
		if [[ -d "${install_dir}/${pkgix_root}" ]]; then
			# As prefix is $pkgix_root, the complete folder structure from / is maintained inside $install_dir
			find_printbase "${install_dir}/${pkgix_root}" > "$staging_files_file"
		else
			warning_printf $"Package did not install any files.\n"
		fi

		# Require files.backup file; can be empty.
		# Perform this step before moving files to .pkgnew!
		local staging_backup_file="${build_dir}/.staging.files.backup"
		: > "$staging_backup_file"
		local backup_path
		local backup_checksum_sha256
		for backup_path in "${backup[@]:+${backup[@]}}"; do
			# Only do checksum based backup with real files
			if [[ -f "${install_dir}/${pkgix_root}/${backup_path}" ]]; then
				backup_checksum_sha256=($(sha256checksum "${install_dir}/${pkgix_root}/${backup_path}"))
				backup_checksum_sha256="${backup_checksum_sha256[0]}"
			else
				backup_checksum_sha256=""
			fi

			echo "${backup_path}:${backup_checksum_sha256}" >> "$staging_backup_file"
		done

		# Check for file conflicts before copying from install_dir to pkgix_root
		local pkgnew_files_file="${build_dir}/.pkgnew.files"
		: > "$pkgnew_files_file"
		if (( ! arg_force )); then
			msg_printf "${Cgrn}%s (%s)${Crst} "$"checking for file conflicts...\n" "$pkg_name" "${version:-}"

			while read path; do
				if [[ ! -d "${pkgix_root}/${path}" && -e "${pkgix_root}/${path}" ]]; then
					in_list "$path" "${forceinstall[@]:+${forceinstall[@]}}" && continue || :

					# Only if the file already exists in pkgix_root and in
					# the backup list, should it be installed as a .pkgnew file.
					if in_list "$path" "${backup[@]:+${backup[@]}}"; then
						mv "${install_dir}/${pkgix_root}/${path}" "${install_dir}/${pkgix_root}/${path}.pkgnew"
						echo "${path}.pkgnew" >> "$pkgnew_files_file"
						warning_printf $"Installing '%s' as '%s'\n" "$path" "${path}.pkgnew"
						continue
					fi

					error_printf $"Conflict detected: %s\n" "$path"
					exit $EXIT_ERR
				fi
			done < "$staging_files_file"
		else
			warning_printf $"Skipping file conflict check.\n"
		fi

		msg_printf "${Cgrn}%s (%s)${Crst} "$"installing...\n" "$pkg_name" "${version:-}"

		# Perform actual installation
		if [[ -d "${install_dir}/${pkgix_root}" ]]; then
			cp -a "${install_dir}/${pkgix_root}"/* "${pkgix_root}"
		fi

		pkg_install_db "$pkgix_root" "$pkg_name" "$staging_files_file" "$pkgnew_files_file" "$staging_backup_file"

		trap - EXIT
		popd &> /dev/null
		(( ! arg_keep_build_dir )) && rm -rf "$build_dir"
		rm -rf "$install_dir"

		# Run postinstall if available
		if type -p postinstall > /dev/null; then
			msg_printf "${Cgrn}%s (%s)${Crst} "$"post-install...\n" "$pkg_name" "${version:-}"
			if ! sourced_pkg_call postinstall "$pkgix_root"; then
				warning_printf $"Post-installation step failed!\n"
			fi
		fi

		msg_printf "${CgrnB}%s (%s)${Crst} "$"successfully installed.\n" "$pkg_name" "${version:-}"
		log_printf "$pkgix_root" "%s (%s) "$"installed\n" "$pkg_name" "${version:-}"
	) || exit $?

	return $RET_OK
} #}}}

#============================================================================
# pkg_remove pkgix_root pkg_name
#
pkg_remove() { #{{{
	local pkgix_root="$1"
	local pkg_name="$2"
	local purge="${3:-0}"

	if ! pkg_isinstalled_db "$pkgix_root" "$pkg_name"; then
		error_printf $"'%s' not found!\n" "$pkg_name"
		exit $EXIT_ERR
	fi

	set_db_vars "$pkgix_root" "$pkg_name"
	local version="$(<"$db_version_file")"

	# Create an empty files.backup file if it does not exist [backwards compatibility].
	if (( purge )) || [[ ! -f "$db_backup_file" ]]; then
		: > "$db_backup_file"
	fi

	msg_printf "${Cgrn}%s (%s)${Crst} "$"removing...\n" "$pkg_name" "$version"

	local backup_path
	local backup_checksum_sha256
	local backup_checksum_sha256_f
	while read backup_path; do
		# (0) Check for changed files which require backup
		backup_checksum_sha256="${backup_path##*:}"
		backup_path="${backup_path%:*}"

		if [[ -f "${pkgix_root}/${backup_path}" ]]; then
			backup_checksum_sha256_f=($(sha256checksum "${pkgix_root}/${backup_path}"))
			backup_checksum_sha256_f="${backup_checksum_sha256_f[0]}"

			# If file changed, exclude from deletion
			if [[ "$backup_checksum_sha256" != "$backup_checksum_sha256_f" ]]; then
				verbose_printf $"Keeping modified '%s'\n" "$backup_path"
				echo "^${backup_path}$"
			fi
		else
			# Exclude by default
			echo "^${backup_path}$"
		fi
	done < "$db_backup_file" | grep -v -f - "$db_files_file" |
	while read filename; do
		# (1) First pass delete files and get directory depths

		if [[ ! -d "${pkgix_root}/$filename" ]]; then
			rm -f "${pkgix_root}/$filename"
		else
			# Get path depth for sorting: If we don't do this, directories
			# which are higher up in the hierarchy are being tried to be
			# deleted before its subdirectories, which could be empty, but
			# because the subdirectories still exist, the parent won't be
			# deleted.
			local o_IFS="$IFS"         ; IFS="/"
			local tmp=(${filename[@]}) ; IFS="$o_IFS"
			printf "${#tmp[@]}:${filename}\n"
		fi
	done | sort -rn |
	while read filename; do
		# (2) Then check for empty directories and delete if empty
		local filename="${filename#*:}"
		remove_empty_dirs "${pkgix_root}/$filename" 0
	done

	# Remove meta files
	rm "$db_files_file"
	rm "$db_backup_file"
	rm "$db_version_file"
	rm "$db_info_file"

	# Clean up db
	remove_empty_dirs "${pkgix_root}/${DB_PREFIX}"

	# Set package as removed
	sed -i "s:^.|${pkg_name}$:r|${pkg_name}:" "${pkgix_root}/${DB_PREFIX}.db"

	msg_printf "${CgrnB}%s (%s)${Crst} "$"successfully removed.\n" "$pkg_name" "$version"
	log_printf "$pkgix_root" "%s (%s) "$"removed\n" "$pkg_name" "$version"

	unset_db_vars
} #}}}

#============================================================================
# cmd_install pkgix_root pkg_name...
#
cmd_install() { #{{{
	if [[ -z "${1:-}" ]]; then
		error_printf $"You need to specify a pkgix root!\n"
		exit $EXIT_ERR
	fi

	local pkgix_root="$1"
	shift

	if [[ -z "${1:-}" ]]; then
		error_printf $"You need to specify at least one package to install.\n"
		exit $EXIT_ERR
	fi

	if [[ ! -d "${pkgix_root}" ]]; then
		if ! mkdir -p "${pkgix_root}" 2> /dev/null; then
			error_printf $"Could not create directory '%s'!\n" "$pkgix_root"
			exit $EXIT_ERR
		fi
	fi

	pkgix_root="$(cd "$pkgix_root" && pwd)"
	export_env "$pkgix_root"

	lock_root "$pkgix_root" || exit $EXIT_ERR

	msg_printf $"Installing into %s: %s\n" "$pkgix_root" "$*"

	prompt_continue || exit $EXIT_USER_ABORT

	local pkg_name
	for pkg_name in "$@"; do
		pkg_install "$pkgix_root" "$pkg_name" "$arg_reinstall"
	done

	unlock_root "$pkgix_root"
} #}}}

#============================================================================
# root_upgrade pkgix_root
#
root_upgrade() { #{{{
	local pkgix_root="$1"

	if [[ ! -f "${pkgix_root}/${DB_PREFIX}.db" ]]; then
		warning_printf $"'%s' is not a valid %s root!\n" "$pkgix_root" "$PROGNAME"
		return $RET_INVALID_OPTION
	fi

	pkgix_root="$(cd "$pkgix_root" && pwd)"
	export_env "$pkgix_root"

	lock_root "$pkgix_root" || exit $EXIT_ERR

	msg_printf $"Upgrading %s ...\n" "$pkgix_root"

	prompt_continue || return $RET_USER_ABORT

	db_list_installed "$pkgix_root" |
	while read pkg_name; do
		set_db_vars "$pkgix_root" "$pkg_name"

		old_version="$(<$db_version_file)"

		(
			if ! source_pkg "$pkg_name"; then
				warning_printf $"Could not find package description file for '%s', skipping upgrade...\n" "$pkg_name"
			elif [[ "${version:-}" != "$old_version" ]] || (( arg_reinstall )); then
				msg_printf "${Cylw}"$"Upgrading""${Crst} %s (%s -> %s)" "$pkg_name" "$old_version" "${version:-}"
				(( ! arg_reinstall )) && printf "\n" || printf " - "$"reinstall\n"
				log_printf "$pkgix_root" $"upgrading"" %s (%s -> %s)\n" "$pkg_name" "$old_version" "${version:-}"

				pkg_install "$pkgix_root" "$pkg_name" 1
			else
				msg_printf "%s (%s) "$"is up to date\n" "$pkg_name" "$old_version"
			fi
		) || exit $?  # Break out of pipe-subshell

		unset_db_vars
	done || return $? # Take return code if pipe-subshell exited with errors

	msg_printf $"Done upgrading.\n"

	unlock_root "$pkgix_root"
} #}}}

#============================================================================
# cmd_upgrade pkgix_root...
#
cmd_upgrade() { #{{{
	if [[ -z "${1:-}" ]]; then
		error_printf $"You need to specify at least one pkgix root!\n"
		exit $EXIT_ERR
	fi

	local pkgix_root
	local ret_code
	for pkgix_root in "$@"; do
		# Run nested, not to pollute subsequent upgrades with export_env
		# The environment should be set accordingly prior to upgrading!
		( root_upgrade "$pkgix_root" ) && ret_code=$? || ret_code=$?
		if (( ret_code != RET_OK && ret_code != RET_INVALID_OPTION && ret_code != RET_USER_ABORT )); then
			exit $EXIT_ERR
		fi
	done
} #}}}

#============================================================================
# cmd_remove pkgix_root pkg_name...
#
cmd_remove() { #{{{
	local pkgix_root="${1:-}"
	shift || { error_printf $"No targets specified!\n"; exit $EXIT_ERR; }

	if [[ ! -d "$pkgix_root" ]]; then
		error_printf $"'%s' is not a valid directory!\n" "$pkgix_root"
		exit $EXIT_ERR
	fi

	pkgix_root="$(cd "$pkgix_root" && pwd)"

	lock_root "$pkgix_root" || exit $EXIT_ERR

	msg_printf $"Removing from %s: %s\n" "$pkgix_root" "$*"
	prompt_continue || exit $EXIT_USER_ABORT
	
	local pkg_name
	for pkg_name in "$@"; do
		pkg_remove "$pkgix_root" "$pkg_name" "$arg_purge"
	done

	unlock_root "$pkgix_root"
} #}}}

#============================================================================
# cmd_avail
#
cmd_avail() { #{{{
	if (( $# == 0 )); then
		local o_IFS="$IFS" ; IFS="$URL_SEP"
		local repo_url
		for repo_url in $PKGIX_REPO_URLS; do
			(( ! arg_quiet )) && printf -- "${CbluB}-> ${CgrnB}${repo_url}${Crst}\n" || :
			case "$repo_url" in
				http://*|https://*|ftp://*)
					msg_printf $"Listing packages for a HTTP repository is not supported!\n"
					;;
				*)
					# Don't show hidden files
					find_printbase "$repo_url" \( -type f -o -type l \) -a ! -name ".*" 2> /dev/null | sort |
					while read pkg_name; do
						if (( arg_quiet )); then
							echo "$repo_url $pkg_name"
						else
							if is_pkg_pointer "${repo_url}/$pkg_name"; then
								printf "%-42s %-18s %s\n" "$pkg_name" "->" "$(<"${repo_url}/$pkg_name")"
							else
								(
									source "${repo_url}/$pkg_name"
									printf "%-42s %-18s %s\n" "$pkg_name" "${version:-}" "${description:-}"
								)
							fi
						fi
					done
					;;
			esac
		done

		IFS="$o_IFS"
	else
		local pkg_name
		for pkg_name in "$@"; do
			(
				if source_pkg "$pkg_name"; then
					echo "$pkg_name (${version:-}): ${repo_url}"
					echo " Description  : ${description:-}"
					if [[ -z "${metapkg:-}" ]]; then
						echo " Website      : ${website:-}"
						echo " License      : ${license[*]:+${license[*]}}"
						echo " Depends      : ${depends[*]:+${depends[*]}}"
					else
						if [[ "$metapkg" != "$METAPKG_DUMMY" ]]; then
							echo " Metapackage -> $metapkg"
						fi
					fi
				else
					msg_printf $"'%s' not found!\n" "$pkg_name"
				fi

				echo
			)
		done
	fi
} #}}}

#============================================================================
# cmd_list pkgix_root...
#
cmd_list() { #{{{
	local pkgix_root
	for pkgix_root in "$@"; do
		if [[ -d "$pkgix_root" ]]; then
			pkgix_root="$(cd "$pkgix_root" && pwd)"
			(( ! arg_quiet )) && printf "%b" "${CgrnB}${pkgix_root}${Crst}\n" 1>&2 || :

			db_list_installed "$pkgix_root" | sort |
			while read pkg_name; do
				set_db_vars "$pkgix_root" "$pkg_name"

				if (( arg_quiet )); then
					echo "$pkgix_root $pkg_name"
				else
					(
						source "$db_info_file"
						printf "%-42s %-18s %s\n" "${pkg_name}" "$(<$db_version_file)" "${description:-}"
					)
				fi

				unset_db_vars
			done
		fi
	done
} #}}}

#============================================================================
# cmd_show pkgix_root pkg_name...
#
cmd_show() { #{{{
	local pkgix_roots=()

	if [[ "$*" =~ " -- " ]]; then
		while [[ "$1" != "--" ]]; do
			pkgix_roots+=("$1")
			shift || break
		done
	else
		pkgix_roots+=("${1:-}")
	fi

	shift || { error_printf $"No targets specified!\n"; exit $EXIT_ERR; }

	local pkg_name
	local pkgix_root
	for pkg_name in "$@"; do
		for pkgix_root in "${pkgix_roots[@]}"; do
			if [[ ! -d "$pkgix_root" ]]; then
				error_printf $"'%s' is not a valid directory!\n" "$pkgix_root"
				exit $EXIT_ERR
			fi

			pkgix_root="$(cd "$pkgix_root" && pwd)"
			set_db_vars "$pkgix_root" "$pkg_name"

			if pkg_isinstalled_db "$pkgix_root" "$pkg_name"; then
				if (( arg_list_files )); then
					local prefix_line=""
					(( ! arg_quiet )) && prefix_line="$pkg_name " || :
					local path
					while read path; do
						[[ -n "$path" ]] && echo "${prefix_line}${pkgix_root}/${path}" || :
					done < "$db_files_file"
				else
					source "$db_info_file"
					echo "$pkg_name ($(<$db_version_file)): ${pkgix_root}"
					echo " Description  : ${description:-}"
					echo " Website      : ${website:-}"
					echo " License      : ${license[*]:+${license[*]}}"
					echo " Depends      : ${depends[*]:+${depends[*]}}"
					echo " Install date : ${installdate:-}"

					echo
					unset_db_info
				fi

				# found, stop searching further pkgix_roots
				break
			else
				# indicate not yet found, continue search
				db_prefix=""
			fi
		done

		if [[ -z "$db_prefix" ]]; then
			error_printf $"'%s' not found!\n" "$pkg_name"
			exit $EXIT_ERR
		fi

		unset_db_vars
	done
} #}}}

#============================================================================
# cmd_chenv pkgix_root...
#
cmd_chenv() { #{{{
	local pkgix_root
	for pkgix_root in "$@"; do
		export_env "$pkgix_root"
	done

	msg_printf $"Spawning shell\n"
	exec "$PKGIX_SHELL"
} #}}}

sanitize_repo_urls() { #{{{
	local old_repo_urls="$PKGIX_REPO_URLS"
	local o_IFS="$IFS" ; IFS="$URL_SEP"

	PKGIX_REPO_URLS=""

	local url
	for url in $old_repo_urls; do
		[[ "$url" =~ ^file:// ]] && url="${url##file://}"
		url=${url%%/}

		PKGIX_REPO_URLS+="${url};"
	done

	IFS="$o_IFS"
} #}}}

prog_usage() { #{{{
	printf -- $"Usage: %s [-r|--repo-urls] [-n|--noconfirm] [-v|--verbose] [--debug]\n" "$PROGNAME"
	printf -- $"             <command> [<args>]\n"
	echo
	printf -- $"Commands available:\n"
	printf -- $"    install    Install a package in a prefix environment\n"
	printf -- $"    remove     Remove an installed package\n"
	printf -- $"    upgrade    Upgrade a prefix environment\n"
	printf -- $"    avail      List packages available to install\n"
	printf -- $"    list       List installed packages\n"
	printf -- $"    show       Show information about installed packages\n"
	printf -- $"    showenv    Show prefix environment parameters\n"
	printf -- $"    chenv      Switch to a prefix environment\n"
	echo
	printf -- $"Options:\n"
	printf -- $"   -r, --repo-urls\n"
	printf -- $"       Specify additional package repository URL; use '%s' to\n" "$URL_SEP"
	printf -- $"       separate multiple repositories. Currently supported protocols are:\n"
	printf -- $"           file:// (default), http://, https://, ftp://\n"
	printf -- $"   -n, --noconfirm\n"
	printf -- $"       Proceed without asking the user for confirmation.\n"
	printf -- $"   -v, --verbose\n"
	printf -- $"       Be more verbose.\n"
	printf -- $"   -q, --quiet\n"
	printf -- $"       Be less verbose; some commands can show less information,\n"
	printf -- $"       which makes their output more easily parsable by other tools.\n"
	printf -- $"   -d, --debug\n"
	printf -- $"       Debug mode: enable nounset for package files\n"
	printf -- $"   -h, --help\n"
	printf -- $"       Display this help message.\n"
	printf -- $"   -V, --version\n"
	printf -- $"       Display version information.\n"
	echo
	printf -- $"See '%s help <command>' for more information on a command.\n" "$PROGNAME"
} #}}}

prog_version() { #{{{
	echo "$PROGNAME $PROG_VERSION"
	echo
	echo "Copyright (C) 2012, Marco Elver <me AT marcoelver.com>"
	echo
	echo "This is free software; see the source for copying conditions."
	echo "There is NO WARRANTY, to the extent permitted by law."
} #}}}

#============================================================================
# trap_ERR errcode lineno command [traceback...]
#
trap_ERR() { #{{{
	local errcode="$1"
	local lineno="$2"
	local command="$3"
	shift 3
	local traceback=""

	[[ -n "$*" ]] && printf -v traceback "\n    ${CredB}=>${Crst} in %s" "$@"
	error_printf "line %s - '%s' failed (code=%s)%s\n" "$lineno" "$command" "$errcode" "$traceback"
	exit 42
} #}}}

reset_traps() { #{{{
	trap '{ msg_printf $"TERM signal caught, exiting...\n"; exit 42; }' TERM HUP QUIT
	trap '{ msg_printf $"User aborted.\n"; exit 42; }' INT
	trap 'trap_ERR "$?" "$LINENO" "$BASH_COMMAND" "${FUNCNAME[@]:+${FUNCNAME[@]}}"' ERR
} #}}}

reset_traps

# Get command line options
arg_verbose=0
arg_quiet=0
arg_noconfirm=0
arg_debug=0

while :; do
	case "${1:-}" in
		-r|--repo-urls)
			[[ -z "${2:-}" ]] && { prog_usage; exit $EXIT_INVALID_OPTION; }

			PKGIX_REPO_URLS="${2}${URL_SEP}${PKGIX_REPO_URLS}"
			shift
			;;
		-v|--verbose) arg_verbose=1 ;;
		-q|--quiet) arg_quiet=1 ;;
		-n|--noconfirm) arg_noconfirm=1 ;;
		-d|--debug) arg_debug=1 ;;
		-h|--help) prog_usage; exit $EXIT_OK ;;
		-V|--version) prog_version; exit $EXIT_OK ;;
		*) break ;;
	esac
	shift
done

sanitize_repo_urls

cmd="${1:-}"
shift || :
case "$cmd" in
	install|upgrade)
		arg_force=0
		arg_nodeps=0
		arg_reinstall=0
		arg_keep_build_dir=0
		arg_ignore_checksums=0

		while :; do
			case "${1:-}" in
				-f|--force) arg_force=1 ;;
				-d|--nodeps) arg_nodeps=1 ;;
				-r|--reinstall) arg_reinstall=1 ;;
				-k|--keep-build-dir) arg_keep_build_dir=1 ;;
				--ignore-checksums) arg_ignore_checksums=1 ;;
				*) break ;;
			esac
			shift
		done

		;;& # Evaluate next statements!
	remove)
		arg_purge=0

		while :; do
			case "${1:-}" in
				-P|--purge) arg_purge=1 ;;
				*) break ;;
			esac
			shift
		done

		;;&
	show)
		arg_list_files=0

		while :; do
			case "${1:-}" in
				-l|--list) arg_list_files=1 ;;
				*) break ;;
			esac
			shift
		done
		;;&
	install|remove)
		if [[ -z "${PKGIX_ROOT:-}" ]]; then
			cmd_$cmd "$@"
		else
			# Commands which can only accept one root, pass first one only
			# Remove leading ':'
			args_root="${PKGIX_ROOT##:}"
			cmd_$cmd "${args_root%%:*}" "$@"
		fi
		;;
	upgrade|list|show|showenv|chenv)
		if [[ -z "${PKGIX_ROOT:-}" ]]; then
			cmd_$cmd "$@"
		else
			o_IFS="$IFS" ; IFS=":"
			args_root=(${PKGIX_ROOT[@]})
			IFS="$o_IFS" ; unset o_IFS

			case "$cmd" in
				show) cmd_$cmd "${args_root[@]}" -- "$@" ;;
				*)    cmd_$cmd "${args_root[@]}" "$@" ;;
			esac
		fi
		;;
	avail)
		cmd_$cmd "$@"
		;;
	help)
		case "${1:-}" in
			install|upgrade)
				printf -- $"Usage: %s %s [-f|--force] [-d|--nodeps] [-r|--reinstall]\n" "$PROGNAME" "$1"
				printf -- $"                     [-k|--keep-build-dir] [--ignore-checksums]\n"

				if [[ "$1" == "install" ]]; then
					printf -- $"                     <pkgix-root> <pkgs>...\n"
				else
					printf -- $"                     <pkgix-roots>...\n"
				fi

				echo
				printf -- $"Options:\n"
				printf -- $"    -f, --force\n"
				printf -- $"        Force installation of programs that are: already available outside of\n"
				printf -- $"        <pkgix-roots>; satisfied metapackages; incompatible with the current system;\n"
				printf -- $"        conflicting with already installed files.\n"
				printf -- $"        Also forces overwriting files which were normally preserved (see backup).\n"
				printf -- $"    -d, --nodeps\n"
				printf -- $"        Ignore dependenciy check and do not install dependencies.\n"
				printf -- $"    -r, --reinstall\n"
				printf -- $"        Reinstall non-dependency, explicitly selected packages. When upgrading,\n"
				printf -- $"        reinstall all installed packages.\n"
				printf -- $"    -k, --keep-build-dir\n"
				printf -- $"        Keeps the build directory.\n"
				printf -- $"    --ignore-checksums\n"
				printf -- $"        Ignores checksums for remotely fetched files.\n"
				;;
			remove)
				printf -- $"Usage: %s %s [-P|--purge]\n" "$PROGNAME" "$1"
				echo
				printf -- $"Options:\n"
				printf -- $"    -P, --purge\n"
				printf -- $"        Force removal of all installed files, even those marked for backup.\n"
				;;
			show)
				printf -- $"Usage: %s %s [-l|--list] (<pkgix-roots>... --|<pkgix-root>) <pkgs>...\n" "$PROGNAME" "$1"
				echo
				printf -- $"Options:\n"
				printf -- $"    -l, --list\n"
				printf -- $"        List installed package files.\n"
				;;
			list|showenv|chenv)
				printf -- $"Usage: %s %s <pkgix-roots>...\n" "$PROGNAME" "$1"
				;;
			avail)
				printf -- $"No further information available.\n"
				;;
			help)
				printf -- $"Usage: %s %s <command>\n" "$PROGNAME" "$1"
				;;
			*)
				printf -- $"Please specify valid command.\n"
				exit $EXIT_INVALID_OPTION
				;;
		esac
		;;
	*)
		prog_usage
		exit $EXIT_INVALID_OPTION
		;;
esac

exit $EXIT_OK

# vim: set noet foldmarker={{{,}}} foldlevel=0 fen fdm=marker :
