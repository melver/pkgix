#!/usr/bin/env bash

# localpkgenv: Local environment and package management helper script.
#
# Copyright (C) 2012, Marco Elver <me AT marcoelver.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

##
# Configurable variables, settable via environment
#
[[ -z "$LOCALPKGENV_REPO_URLS" ]] && LOCALPKGENV_REPO_URLS="$(cd "${0%/*}"/.. && pwd)/repo"
[[ -z "$LOCALPKGENV_SHELL" ]] && LOCALPKGENV_SHELL="$SHELL"
[[ -z "$LOCALPKGENV_FETCH" ]] && LOCALPKGENV_FETCH="wget -O %s"

# LOCALPKGENV_ROOT: If set, LOCALPKGENV_ROOT is being used as the default
# root (no need to specify for each command).

##
# Constants
#
PROG_VERSION="0.1.0"
PROGNAME="localpkgenv"
INSTALLED_DB="var/lib/${PROGNAME}/installed"
URL_SEP=";"
METAPKG_DUMMY="_dummy"

##
# Exit codes
#
EXIT_OK=0
EXIT_ERR=1
EXIT_INVALID_OPTION=2
EXIT_USER_ABORT=3

##
# Function return codes
#
RET_OK=0
RET_ERR=1
RET_INVALID_OPTION=2
RET_USER_ABORT=3

##
# printf wrappers
#
msg_printf() {
	printf "\e[0;35m[${PROGNAME}]\e[0m ""$@" 1>&2
}

verbose_printf() {
	(( arg_verbose == 1 )) && msg_printf "$@"
}

error_printf() {
	msg_printf "\e[0;31mERROR:\e[0m ""$@"
}

warning_printf() {
	msg_printf "\e[0;31mWARNING:\e[0m ""$@"
}

##
# OS dependent functions
#
case "$OSTYPE" in
	*freebsd*|*FreeBSD*)
		platform="freebsd"

		sha256checksum() {
			sha256 "$@"
		}

		find_printbase() {
			find "$@" | sed "s:^$1::" 
		}
		;;
	*|*linux*)
		platform="$OSTYPE"

		sha256checksum() {
			sha256sum "$@"
		}

		find_printbase() {
			find "$@" -printf "%P\n"
		}
		;;
esac

##
# extract_archive path_to_archive
#
extract_archive() {
	if [[ -f $1 ]] ; then
		msg_printf "Extracting '$1'...\n"

		case $1 in
			*.tar.bz2)  tar xjf $1   ;;
			*.tar.gz)   tar xzf $1   ;;
			*.tar.lzma) tar --lzma -xf $1 ;;
			*.tar.xz)   tar xJf $1   ;;
			*.tar)      tar xf $1    ;;
			*.tbz2)     tar xjf $1   ;;
			*.tgz)      tar xzf $1   ;;
			*.txz)      tar xJf $1   ;;
			*.bz2)      bunzip2 $1    ;;
			*.rar)      unrar x $1    ;;
			*.gz)       gunzip $1     ;;
			*.zip)      unzip $1      ;;
			*.Z)        uncompress $1 ;;
			*.7z)       7z x $1       ;;
			*)          error_printf "'$1' cannot be extracted (format unknown) !\n" ; exit $EXIT_ERR ;;
		esac
	else
		error_printf "'$1' is not a valid file !\n"
		exit $EXIT_ERR
	fi
}

##
# fetch url checksum_sha256 [file_name]
# Function for use in package description files.
#
fetch() {
	local url="$1"
	local checksum_sha256="$2"
	local file_name="${3:-${url##*/}}"

	if [[ ! -f "$file_name" ]]; then
		if [[ "$url" =~ ^/ ]]; then
			# Is a local path, just copy
			msg_printf "Copying '$url'...\n"
			if ! cp "$url" "$file_name" &> /dev/null; then
				error_printf "Copying '$url' failed!\n"
				exit $EXIT_ERR
			fi
		else
			local fetch_cmd
			printf -v fetch_cmd "$LOCALPKGENV_FETCH" "$file_name"
			msg_printf "Fetching '$url'...\n"
			if ! $fetch_cmd "$url"; then
				error_printf "Fetching '$url' failed!\n"
				exit $EXIT_ERR
			fi
		fi
	fi

	local file_checksum_sha256=($(sha256checksum "$file_name"))
	file_checksum_sha256="${file_checksum_sha256[0]}"

	if [[ -n "$checksum_sha256" ]]; then
		if (( arg_ignore_checksums == 0 )); then
			if [[ "$file_checksum_sha256" != "$checksum_sha256" ]]; then
				error_printf "Checksum of '$file_name' ($file_checksum_sha256)\n              does not match ($checksum_sha256)!\n"
				exit $EXIT_ERR
			else
				msg_printf "Valid checksum: $file_name\n"
			fi
		else
			warning_printf "Ignoring checksum for '$file_name'...\n"
		fi
	else
		if (( arg_ignore_checksums == 0 )); then
			error_printf "No checksum for '$file_name' ($file_checksum_sha256)!\n"
			exit $EXIT_ERR
		else
			warning_printf "No checksum for '$file_name' ($file_checksum_sha256)!\n"
		fi
	fi
}

##
# fetch_extract url checksum [archive_name]
# Function for use in package description files.
#
fetch_extract() {
	local url="$1"
	local checksum_sha256="$2"
	local archive_name="${3:-${url##*/}}"

	fetch "$url" "$checksum_sha256" "$archive_name"
	extract_archive "$archive_name"
}

##
# remove_empty_dirs path [depth]
# Remove empty directories in path.
#
remove_empty_dirs() {
	local path="$1"
	local depth="$2"
	local find_args
	[[ -z "$depth" ]] && find_args=() || find_args=("-maxdepth" "$depth")

	find "$path" "${find_args[@]}" -type d -empty -delete
}

##
# prompt_continue
# Prompt user for "Continue ? [Y/n]"
# Return code will be RET_OK for y and RET_ERR for n.
#
prompt_continue() {
	(( arg_noconfirm == 1 )) && return $RET_OK

	local answer

	printf "\e[1;34mContinue ? [Y/n] \e[0m"
	read answer

	if [[ ! "$answer" =~ ^[yY]|^$ ]]; then
		msg_printf "User aborted.\n"
		return $RET_ERR
	fi

	return $RET_OK
}

##
# export_env localenv_root
#
export_env() {
	[[ ! -d "$1" ]] && return $RET_ERR
	local localenv_root="$(cd "$1" && pwd)"

	if [[ -z "$LOCALPKGENV_ROOT" ]]; then
		# Export so calls to localpkgenv don't need the root; appending, so that 
		# installing takes the first root.
		export LOCALPKGENV_ROOT="$localenv_root"
	else
		# Check if this has already been exported
		# Also check CPATH, as I don't expect a user to set it for a localenv root.
		[[ "$LOCALPKGENV_ROOT" =~ ^(.*:)?${localenv_root}(:.*)?$ &&
			"$CPATH" =~ ^(.*:)?${localenv_root}/include(:.*)?$ ]] && return $RET_OK

		export LOCALPKGENV_ROOT="$LOCALPKGENV_ROOT:${localenv_root}"
	fi

	verbose_printf "Exporting environment: $localenv_root\n"

	# Prepending to PATH
	export PATH="${localenv_root}/bin:$PATH"
	export PATH="${localenv_root}/sbin:$PATH"

	# LD_LIBRARY_PATH is harmful, as it makes programs from the system use
	# the libraries found in $localenv_root/lib, which is certainly not
	# considered stable.
	# For more info: http://xahlee.info/UnixResource_dir/_/ldpath.html

	# Instead, make programs include the correct search path when they are
	# compiled (--rpath).
	if [[ -z "$LD_RUN_PATH" ]]; then
		export LD_RUN_PATH="${localenv_root}/lib"
	else
		export LD_RUN_PATH="${localenv_root}/lib:$LD_RUN_PATH"
	fi

	# And make the linker look in the right paths (-L)
	if [[ -z "$LIBRARY_PATH" ]]; then
		export LIBRARY_PATH="${localenv_root}/lib"
	else
		export LIBRARY_PATH="${localenv_root}/lib:$LIBRARY_PATH"
	fi

	if [[ -z "$PKG_CONFIG_PATH" ]]; then
		export PKG_CONFIG_PATH="${localenv_root}/lib/pkgconfig"
	else
		export PKG_CONFIG_PATH="${localenv_root}/lib/pkgconfig:$PKG_CONFIG_PATH"
	fi

	# C/C++ preprocessor search paths (-I)
	if [[ -z "$CPATH" ]]; then
		export CPATH="${localenv_root}/include"
	else
		export CPATH="${localenv_root}/include:$CPATH"
	fi

	return $RET_OK
}

cmd_showenv() {
	local localenv_root
	for localenv_root in "$@"; do
		export_env "$localenv_root"
	done

	# See export_env for why we are not exporting LD_LIBRARY_PATH

	case "$LOCALPKGENV_SHELL" in
		*csh)
			echo "setenv LOCALPKGENV_ROOT \"$LOCALPKGENV_ROOT\""
			[[ -n "$PATH" ]] && echo "setenv PATH \"$PATH\""
			[[ -n "$LD_RUN_PATH" ]] && echo "setenv LD_RUN_PATH \"$LD_RUN_PATH\""
			[[ -n "$LIBRARY_PATH" ]] && echo "setenv LIBRARY_PATH \"$LIBRARY_PATH\""
			[[ -n "$PKG_CONFIG_PATH" ]] && echo "setenv PKG_CONFIG_PATH \"$PKG_CONFIG_PATH\""
			[[ -n "$CPATH" ]] && echo "setenv CPATH \"$CPATH\""
			;;
		*)
			# Assume sh compatible shell (bash, zsh, ..)
			echo "export LOCALPKGENV_ROOT=\"$LOCALPKGENV_ROOT\""
			[[ -n "$PATH" ]] && echo "export PATH=\"$PATH\""
			#[[ -n "$LD_LIBRARY_PATH" ]] && echo "export LD_LIBRARY_PATH=\"$LD_LIBRARY_PATH\""
			[[ -n "$LD_RUN_PATH" ]] && echo "export LD_RUN_PATH=\"$LD_RUN_PATH\""
			[[ -n "$LIBRARY_PATH" ]] && echo "export LIBRARY_PATH=\"$LIBRARY_PATH\""
			[[ -n "$PKG_CONFIG_PATH" ]] && echo "export PKG_CONFIG_PATH=\"$PKG_CONFIG_PATH\""
			[[ -n "$CPATH" ]] && echo "export CPATH=\"$CPATH\""
			;;
	esac
}

##
# is_pkg_pointer pkg_file
#
is_pkg_pointer() {
	[[ "$(wc -l < "$1")" =~ ^[^0-9]*[01][^0-9]*$ ]]
}

##
# source_pkg_file pkg_file
#
source_pkg_file() {
	local pkg_file="$1"

	if is_pkg_pointer "$pkg_file"; then
		local resolved_pkg_name="$(<$pkg_file)"

		if [[ -z "$resolved_pkg_name" ]]; then
			error_printf "Empty package description file!\n"
			return $RET_ERR
		fi

		msg_printf "Points to $resolved_pkg_name\n"
		source_pkg "$resolved_pkg_name"
	else
		. "$pkg_file"
	fi
}

##
# source_pkg pkg_name
#
source_pkg() {
	local pkg_name="$1"
	local pkg_file
	local old_IFS="$IFS"
	IFS="$URL_SEP"

	# Don't set repo_url as local here, as it can then be used in the package
	# description files to get information about its source repository, and 
	# e.g., download extra files such as patches from the repo.
	for repo_url in $LOCALPKGENV_REPO_URLS; do
		pkg_file="${repo_url}/$pkg_name"

		case "$pkg_file" in
			http://*|https://*)
				local tmpfile="$(mktemp)"

				verbose_printf "Trying: $pkg_file\n"
				if wget -q -O "$tmpfile" "$pkg_file"; then
					verbose_printf "Source: \e[0;32m$pkg_file\e[0m\n"
					source_pkg_file "$tmpfile"
					rm "$tmpfile"
					break
				fi
				rm "$tmpfile"
				;;
			*)
				verbose_printf "Trying: $pkg_file\n"
				if [[ -f "$pkg_file" ]]; then
					verbose_printf "Source: \e[0;32m$pkg_file\e[0m\n"
					source_pkg_file "$pkg_file"
					break
				fi
				;;
		esac
	done

	IFS="$old_IFS"

	[[ -n "$version" || "$metapkg" == "$METAPKG_DUMMY" ]]
}

##
# pkg_install localenv_root pkg_name [reinstall]
#
pkg_install() {
	local localenv_root="$1"
	local pkg_name="$2"
	local reinstall="${3:-0}"
	local is_reinstall=0

	if [[ ! -d "$localenv_root" ]]; then
		error_printf "'$localenv_root' is not a valid directory!\n"
		exit $EXIT_ERR
	fi

	local db_prefix="${localenv_root}/${INSTALLED_DB}/${pkg_name}"

	if [[ -f "${db_prefix}/version" ]]; then
		if (( reinstall == 0 )); then
			msg_printf "$pkg_name is available\n"
			return $RET_OK
		else
			is_reinstall=1
		fi
	fi

	# Nested, otherwise variables will get overwritten on recursive calls.
	(
		# Need to unset previous variables, otherwise we might end in an
		# endless loop when resolving dependencies

		unset metapkg
		unset satisfied
		unset version
		unset license
		unset website
		unset description
		unset depends
		unset iscompat
		unset isinstalled
		unset build
		unset installenv

		# Source package description file and try to traverse until a non-meta
		# package description is found.
		local next_pkg_name="$pkg_name" # preserve requested package name
		while true; do
			if ! source_pkg "$next_pkg_name"; then
				error_printf "Could not find valid package description file for '$next_pkg_name'!\n"
				exit $EXIT_ERR
			fi

			# Not a meta-package, continue normally
			[[ -z "$metapkg" ]] && break

			# Is metapackage, check if satisfied
			if (( is_reinstall == 0 )) && ( satisfied ); then
				if (( arg_force == 0 )); then
					msg_printf "Metapackage '$next_pkg_name' satisfied.\n"
					exit $EXIT_OK
				else
					warning_printf "Forcing installation of metapackage '$next_pkg_name', despite satisfied...\n"
				fi
			fi

			# If this metapackage is only a dummy to check if a dependence is satisfied,
			# and the above 'satisfied' function failed, this is a dead end.
			if [[ "$metapkg" == "$METAPKG_DUMMY" ]]; then
				error_printf "Metapackage '$next_pkg_name' could not be satisfied!\n"
				exit $EXIT_ERR
			fi

			# Not satisfied and not a dummy, resolve this by trying to install
			# the suggested package.
			msg_printf "Metapackage: $next_pkg_name -> $metapkg\n"
			next_pkg_name="$metapkg"

			# Unset meta package fields, before next iteration of source_pkg
			unset metapkg
			unset version
			unset satisfied
			unset description
		done

		# Run all commands from package description file in subshells
		# so they can't clutter the namespace.

		if (( is_reinstall == 0 )) && ( isinstalled ); then
			if (( arg_force == 0 )); then
				msg_printf "'$pkg_name' already available outside of '$localenv_root', skipping...\n"
				exit $EXIT_OK
			else
				msg_printf "Forcing installation of '$pkg_name', despite already available outside of '$localenv_root'...\n"
			fi
		fi

		if ! ( iscompat ); then
			if (( arg_force == 0 )); then
				error_printf "'$pkg_name' is not compatible with your system!\n"
				exit $EXIT_ERR
			else
				warning_printf "Trying installation of '$pkg_name', despite system incompatibility...\n"
			fi
		fi

		if (( arg_nodeps == 0 )); then
			msg_printf "Resolving $pkg_name dependencies...\n"
			local dep_name
			for dep_name in ${depends[@]}; do
				pkg_install "$localenv_root" "$dep_name"
			done
		else
			warning_printf "Ignoring dependencies.\n"
		fi

		msg_printf "Building $pkg_name ($version)...\n"

		local build_dir="${localenv_root}/.${PROGNAME}-build"
		local install_dir="${localenv_root}/.${PROGNAME}-tmpinstall"
		mkdir -p "$build_dir"
		mkdir -p "$install_dir"

		pushd "$build_dir" &> /dev/null

		# Run build and installenv in subshells

		if ! ( build "$localenv_root" "$install_dir" ); then
			popd &> /dev/null
			(( arg_keep_build_dir == 0)) && rm -rf "$build_dir"
			rm -rf "$install_dir"
			error_printf "Building '$pkg_name' failed! Aborting.\n"
			exit $EXIT_ERR
		fi

		if (( is_reinstall != 0 )); then
			# Uninstall after build, so that if building a package depends on
			# itself it is used rather than the system version (e.g., gcc).  If
			# the system version should be used again: uninstall->install manually.
			pkg_uninstall "$localenv_root" "$pkg_name"
		fi

		msg_printf "Installing $pkg_name ($version)...\n"

		if ! ( installenv "$localenv_root" "$install_dir" ); then
			popd &> /dev/null
			(( arg_keep_build_dir == 0)) && rm -rf "$build_dir"
			rm -rf "$install_dir"
			error_printf "Installation of '$pkg_name' failed! Aborting.\n"
			exit $EXIT_ERR
		fi

		popd &> /dev/null
		(( arg_keep_build_dir == 0)) && rm -rf "$build_dir"

		# Create installed database folders
		mkdir -p "${db_prefix}"

		# As prefix is $localenv_root, the complete folder structure from / is maintained inside $install_dir
		find_printbase "${install_dir}/${localenv_root}" > "${db_prefix}/files"
		cp -rp "${install_dir}/${localenv_root}"/* "${localenv_root}"
		rm -rf "$install_dir"

		echo "$version" > "${db_prefix}/version"
		[[ -z "$version" ]] && warning_printf "Empty 'version' field in package description file of '$pkg_name'!\n"

		echo "description=\"$description\"" > "${db_prefix}/info"
		[[ -z "$description" ]] && warning_printf "Empty 'description' field in package description file of '$pkg_name'!\n"

		echo "license=(${license[@]})" >> "${db_prefix}/info"
		[[ -z "$license" ]] && warning_printf "Empty 'license' field in package description file of '$pkg_name'!\n"

		echo "website=\"$website\"" >> "${db_prefix}/info"
		[[ -z "$website" ]] && warning_printf "Empty 'website' field in package description file of '$pkg_name'!\n"

		echo "installdate=\"$(date)\"" >> "${db_prefix}/info"

		# The db file is important for upgrading packages in the order they were installed!
		# As the entries are not deleted upon uninstallation, over time, a dependence ordering
		# is being built, so that if uninstalled packages are reinstalled, upgrading still
		# works as before.
		local db_file="${localenv_root}/${INSTALLED_DB}.db"

		if [[ -f "$db_file" ]] && grep -q "^.|${pkg_name}$" "$db_file"; then
			sed -i "s:^.|${pkg_name}$:i|${pkg_name}:" "$db_file"
		else
			echo "i|$pkg_name" >> "$db_file"
		fi

		msg_printf "Done installing $pkg_name ($version)\n"
	) || exit $?

	return $RET_OK
}

##
# pkg_uninstall localenv_root pkg_name
#
pkg_uninstall() {
	local localenv_root="$1"
	local pkg_name="$2"
	local db_prefix="${localenv_root}/${INSTALLED_DB}/${pkg_name}"
	local files_file="${db_prefix}/files"
	local version_file="${db_prefix}/version"
	local info_file="${db_prefix}/info"

	if [[ ! -f "$files_file" ]]; then
		error_printf "'$files_file' does not exist!\n"
		exit $EXIT_ERR
	fi

	msg_printf "Uninstalling $pkg_name ($(<"$version_file"))...\n"

	while read filename; do
		# (1) First pass delete files and get directory depths

		if [[ ! -d "${localenv_root}/$filename" ]]; then
			rm -f "${localenv_root}/$filename"
		else
			# Get path depth for sorting: If we don't do this, directories
			# which are higher up in the hierarchy are being tried to be
			# deleted before its subdirectories, which could be empty, but
			# because the subdirectories still exist, the parent won't be
			# deleted.
			local old_IFS="$IFS"
			IFS="/"
			local tmp=(${filename[@]})
			printf "${#tmp[@]}:${filename}\n"
			IFS="$old_IFS"
		fi
	done < "$files_file" | sort -rn |
	while read filename; do
		# (2) Then check for empty directories and delete if empty
		filename="${filename#*:}"
		remove_empty_dirs "${localenv_root}/$filename" 0
	done

	# Remove meta files
	rm "$files_file"
	rm "$version_file"
	rm "$info_file"

	# Clean up installed db
	remove_empty_dirs "${localenv_root}/${INSTALLED_DB}"

	# Set package as uninstalled
	sed -i "s:^.|${pkg_name}$:u|${pkg_name}:" "${localenv_root}/${INSTALLED_DB}.db"

	msg_printf "Done uninstalling $pkg_name\n"
}

cmd_install() {
	if [[ -z "$1" ]]; then
		error_printf "You need to specify a locakpkgenv root!\n"
		exit $EXIT_ERR
	fi

	local localenv_root="$1"
	shift

	if [[ -z "$1" ]]; then
		error_printf "You need to specify at least one package to install.\n"
		exit $EXIT_ERR
	fi

	if [[ ! -d "${localenv_root}" ]]; then
		if ! mkdir -p "${localenv_root}" 2> /dev/null; then
			error_printf "Could not create directory '$localenv_root'!\n"
			exit $EXIT_ERR
		fi
	fi

	localenv_root="$(cd "$localenv_root" && pwd)"
	export_env "$localenv_root"

	msg_printf "Installing into $localenv_root: $*\n"

	prompt_continue || exit $EXIT_USER_ABORT

	local pkg_name
	for pkg_name in "$@"; do
		pkg_install "$localenv_root" "$pkg_name" "$arg_reinstall"
	done
}

##
# root_upgrade localenv_root
#
root_upgrade() {
	local localenv_root="$1"

	if [[ ! -f "${localenv_root}/${INSTALLED_DB}.db" ]]; then
		warning_printf "'$localenv_root' is not a valid $PROGNAME root!\n"
		return $RET_INVALID_OPTION
	fi

	localenv_root="$(cd "$localenv_root" && pwd)"
	export_env "$localenv_root"

	msg_printf "Upgrading $localenv_root ...\n"

	prompt_continue || return $RET_USER_ABORT

	grep "^i|" "${localenv_root}/${INSTALLED_DB}.db" |
	while read pkg_name; do
		pkg_name="${pkg_name##i|}"
		version_file="${localenv_root}/${INSTALLED_DB}/${pkg_name}/version"

		if [[ ! -f "$version_file" ]]; then
			warning_printf "Inconsistent database: no metadata for '$pkg_name'\n"
			continue
		fi

		installed_version="$(<$version_file)"

		(
			if ! source_pkg "$pkg_name"; then
				warning_printf "Could not find package description file for '$pkg_name', skipping upgrade...\n"
			elif [[ "$version" != "$installed_version" ]] || (( arg_reinstall != 0 )); then
				msg_printf "\e[0;33mUpgrading\e[0m $pkg_name ($installed_version -> $version)"
				(( arg_reinstall == 0 )) && printf "\n" || printf " - reinstall\n"

				pkg_install "$localenv_root" "$pkg_name" 1
			else
				msg_printf "$pkg_name ($installed_version) is up to date\n"
			fi
		) || exit $?  # Break out of pipe-subshell
	done || return $? # Take return code if pipe-subshell exited with errors

	msg_printf "Done upgrading.\n"
}

cmd_upgrade() {
	if [[ -z "$1" ]]; then
		error_printf "You need to specify at least one locakpkgenv root!\n"
		exit $EXIT_ERR
	fi

	local localenv_root
	for localenv_root in "$@"; do
		# Run nested, not to pollute subsequent upgrades with export_env
		# The environment should be set accordingly prior to upgrading!
		( root_upgrade "$localenv_root" )
		if (( $? != RET_OK && $? != RET_INVALID_OPTION && $? != RET_USER_ABORT )); then
			exit $EXIT_ERR
		fi
	done
}

cmd_uninstall() {
	local localenv_root="$1"
	shift

	if [[ ! -d "$localenv_root" ]]; then
		error_printf "'$localenv_root' is not a valid directory!\n"
		exit $EXIT_ERR
	fi

	localenv_root="$(cd "$localenv_root" && pwd)"

	msg_printf "Uninstalling from $localenv_root: $*\n"
	prompt_continue || exit $EXIT_USER_ABORT
	
	local pkg_name
	for pkg_name in "$@"; do
		pkg_uninstall "$localenv_root" "$pkg_name"
	done
}

cmd_avail() {
	local old_IFS="$IFS"
	IFS="$URL_SEP"

	local repo_url
	for repo_url in $LOCALPKGENV_REPO_URLS; do
		printf "\e[1;34m-> \e[1;32m${repo_url}\e[0m\n"
		case "$repo_url" in
			http://*|https://*)
				msg_printf "Listing packages for a HTTP repository is not supported!\n"
				;;
			*)
				# Don't show hidden files
				find_printbase "$repo_url" \( -type f -o -type l \) -a ! -name ".*" 2> /dev/null | sort |
				while read pkg_name; do
					if is_pkg_pointer "${repo_url}/$pkg_name"; then
						printf "%-42s %-18s %s\n" "$pkg_name" "->" "$(<"${repo_url}/$pkg_name")"
					else
						(
							. "${repo_url}/$pkg_name"
							printf "%-42s %-18s %s\n" "$pkg_name" "$version" "$description"
						)
					fi
				done
				;;
		esac
	done

	IFS="$old_IFS"
}

cmd_list() {
	local localenv_root
	for localenv_root in "$@"; do
		if [[ -d "$localenv_root" ]]; then
			localenv_root="$(cd "$localenv_root" && pwd)"
			printf "\e[1;32m${localenv_root}\e[0m\n" 1>&2

			if [[ -d "${localenv_root}/${INSTALLED_DB}" ]]; then
				find "${localenv_root}/${INSTALLED_DB}" -type f -name "version" | sort |
				while read version_file; do
					pkg_name="${version_file##${localenv_root}/${INSTALLED_DB}/}"
					pkg_name="${pkg_name%%/version}"
					info_file="${localenv_root}/${INSTALLED_DB}/${pkg_name}/info"
					(
						. "$info_file"
						printf "%-42s %-18s %s\n" "${pkg_name}" "$(<$version_file)" "$description"
					)
				done
			fi
		fi
	done
}

cmd_show() {
	local localenv_root="$1"
	shift

	if [[ ! -d "$localenv_root" ]]; then
		error_printf "'$localenv_root' is not a valid directory!\n"
		exit $EXIT_ERR
	fi

	local db_prefix
	local version_file
	local info_file

	for pkg_name in "$@"; do
		db_prefix="${localenv_root}/${INSTALLED_DB}/${pkg_name}"
		version_file="${db_prefix}/version"
		info_file="${db_prefix}/info"

		if [[ ! -f "$version_file" ]]; then
			error_printf "'$version_file' does not exist!\n"
			exit $EXIT_ERR
		fi

		if [[ ! -f "$info_file" ]]; then
			error_printf "'$info_file' does not exist!\n"
			exit $EXIT_ERR
		fi

		. "$info_file"
		echo "$pkg_name ($(<$version_file)):"
		echo "Description  : $description"
		echo "Website      : $website"
		echo "License      : ${license[@]}"
		echo "Install date : ${installdate}"
		echo

		unset description
		unset license
		unset website
	done
}

cmd_chenv() {
	local localenv_root
	for localenv_root in "$@"; do
		export_env "$localenv_root"
	done

	msg_printf "Spawning shell\n"
	exec "$LOCALPKGENV_SHELL"
}

sanitize_repo_urls() {
	local old_repo_urls="$LOCALPKGENV_REPO_URLS"
	local old_IFS="$IFS"
	IFS="$URL_SEP"

	LOCALPKGENV_REPO_URLS=""

	local url
	for url in $old_repo_urls; do
		[[ "$url" =~ ^file:// ]] && url="${url##file://}"
		url=${url%%/}

		LOCALPKGENV_REPO_URLS+="${url};"
	done

	IFS="$old_IFS"
}

prog_usage() {
	echo "Usage: $PROGNAME [-r|--repo-urls] [-n|--noconfirm] [-v|--verbose]"
	echo "                   <command> [<args>]"
	echo
	echo "Commands available:"
	echo "    install    Install a package in a local environment"
	echo "    upgrade    Upgrade a local environment"
	echo "    uninstall  Uninstall an installed package"
	echo "    avail      List packages available to install"
	echo "    list       List installed packages"
	echo "    show       Show information about installed packages"
	echo "    showenv    Show local environment parameters"
	echo "    chenv      Switch to a local environment"
	echo
	echo "Options:"
	echo "   -r, --repo-urls"
	echo "       Specify additional package repository URL; use '$URL_SEP' to separate multiple repositories."
	echo "       Currently supported protocols are: file://, http://, https://"
	echo "   -n, --noconfirm"
	echo "       Proceed without asking the user for confirmation."
	echo "   -v, --verbose"
	echo "       Be more verbose."
	echo "   -h, --help"
	echo "       Display this help message."
	echo "   -V, --version"
	echo "       Display version information."
	echo
	echo "See '$PROGNAME help <command>' for more information on a command."
}

prog_version() {
	echo "$PROGNAME $PROG_VERSION"
	echo
	echo "Copyright (C) 2012, Marco Elver <me AT marcoelver.com>"
	echo
	echo "This is free software; see the source for copying conditions."
	echo "There is NO WARRANTY, to the extent permitted by law."
}

# Get command line options
arg_verbose=0
arg_noconfirm=0

while true; do
	case "$1" in
		-r|--repo-urls)
			LOCALPKGENV_REPO_URLS="$2;$LOCALPKGENV_REPO_URLS"
			shift
			;;
		-v|--verbose) arg_verbose=1 ;;
		-n|--noconfirm) arg_noconfirm=1 ;;
		-h|--help) prog_usage; exit $EXIT_OK ;;
		-V|--version) prog_version; exit $EXIT_OK ;;
		*)
			break
			;;
	esac
	shift
done

sanitize_repo_urls

cmd=$1
shift
case "$cmd" in
	install|upgrade)
		arg_force=0
		arg_nodeps=0
		arg_reinstall=0
		arg_keep_build_dir=0
		arg_ignore_checksums=0

		while true; do
			case "$1" in
				-f|--force) arg_force=1 ;;
				-d|--nodeps) arg_nodeps=1 ;;
				--reinstall) arg_reinstall=1 ;;
				--keep-build-dir) arg_keep_build_dir=1 ;;
				--ignore-checksums) arg_ignore_checksums=1 ;;
				*) break ;;
			esac
			shift
		done

		;;& # Evaluate next statements!
	install|uninstall|show)
		if [[ -z "$LOCALPKGENV_ROOT" ]]; then
			cmd_$cmd "$@"
		else
			# Commands which can only accept one root, pass first one only
			# Remove leading ':'
			args_root="${LOCALPKGENV_ROOT##:}"
			cmd_$cmd "${args_root%%:*}" "$@"
		fi
		;;
	upgrade|list|showenv|chenv)
		if [[ -z "$LOCALPKGENV_ROOT" ]]; then
			cmd_$cmd "$@"
		else
			old_IFS="$IFS"
			IFS=":"
			args_root=(${LOCALPKGENV_ROOT[@]})
			IFS="$old_IFS"
			unset old_IFS
			cmd_$cmd "${args_root[@]}" "$@"
		fi
		;;
	avail)
		cmd_$cmd "$@"
		;;
	help)
		case "$1" in
			install|upgrade)
				echo "Usage: $PROGNAME $1 [-f|--force] [-d|--nodeps] [--reinstall]"
				echo "                   [--keep-build-dir] [--ignore-checksums]"

				if [[ "$1" == "install" ]]; then
					echo "                   <localenv-dir> <pkgs>..."
				else
					echo "                   <localenv-dirs>..."
				fi

				echo
				echo "Options:"
				echo "    -f, --force"
				echo "        Force installation of programs that are: already available outside of"
				echo "        <localenv-dir>; satisfied metapackages; incompatible with the current system."
				echo "    -d, --nodeps"
				echo "        Ignore dependenciy check and do not install dependencies."
				echo "    --reinstall"
				echo "        Reinstall non-dependency, explicitly selected packages. When upgrading,"
				echo "        reinstall all installed packages."
				echo "    --keep-build-dir"
				echo "        Keeps the build directory."
				echo "    --ignore-checksums"
				echo "        Ignores checksums for remotely fetched files."
				;;
			uninstall|avail|list|show|showenv|chenv|help)
				echo "No further information available."
				;;
			*)
				echo "Please specify valid command."
				exit $EXIT_INVALID_OPTION
				;;
		esac
		;;
	*)
		prog_usage
		exit $EXIT_INVALID_OPTION
		;;
esac

exit $EXIT_OK

# vim: set noet :
